# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - develop
  paths:
    exclude:
      - ./github/*
      - ./ci/*
      - ./*.txt
      - ./cmake/*
      - ./tests/*
      - ./tools/*
      - ./scripts/*
      - ./docs/*

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'jkadedacr'
  acrName: 'jkadedacr'
  azureRmServiceConnection: 'azure-sp'
  imageRepository: 'jkded'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: 'latest'
  resourceGroupName: 'jka-ded-rg'
  appName: 'jkaded-app'
  storageAccountName: 'jkadedassets'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Deploy
  jobs:
  - job: buildDeply
    displayName: Build & Deploy
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureCLI@2
      displayName: Download assets
      inputs:
        azureSubscription: $(azureRmServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          # Download assets zip
          mkdir "$targetDirectory" && az storage blob download \
            --account-name "$storageAccountName" \
            --container-name assets \
            --name assets.zip \
            --file "$targetDirectory/assets.zip" \
            --auth-mode login;
      env:
        storageAccountName: $(storageAccountName)
        targetDirectory: $(Build.SourcesDirectory)/temp

    - task: ExtractFiles@1
      displayName: Unzip assets
      inputs:
        archiveFilePatterns: '$(Build.SourcesDirectory)/temp/assets.zip'
        destinationFolder: '$(Build.SourcesDirectory)/ci/assets/'

    - task: AzureCLI@2
      displayName: Build and push Docker image
      inputs:
        azureSubscription: $(azureRmServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          # Authenticate to the ACR
          az acr login --name $acrName

          # Build & tag image
          docker build -t $imageName .

          docker tag $imageName $acrFullImageName;
          docker push $acrFullImageName;
      env:
        acrName: $(acrName)
        imageName: jkded
        acrFullImageName: $(acrName).azurecr.io/jkded:latest
  
    - task: AzureCLI@2
      displayName: Restart container
      inputs:
        azureSubscription: $(azureRmServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
            az container restart \
              --name "$appName" \
              --resource-group "$resourceGroupName" \
              || true;
      env:
        appName: $(appName)
        resourceGroupName: $(resourceGroupName)
